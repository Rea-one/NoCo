class vector<T> = {
    have (num size, num pre, T[] data);
    born {
        in (num size, num pre)
        data = new T[pre];
    } on drop {
    }
}

class stack<T> from vector<T> = {
    have (num cursor);


    fn pop = {
        out (void)
        if {
            ignore (0);
            condition (cursor >= 0);
            cursor = cursor - 1;
            return data[cursor];
        } else {
            return null;
        }
    }
    fn push = {
        in (T value)
        out (void)
        data[cursor] = value;
        cursor = cursor + 1;
    }
    fn top = {
        out (T)
        if {
            ignore (0);
            condition (cursor >= 0);
            return data[cursor - 1];
        } else {
            return null;
        }
    }
}

fn quick_sort = {
    in (num[] list, num left, num right);
    out(num[] list);

    num pivot = list[(left + right) / 2];

    loop {
        ignore (0);
        condition (left <= right);
        loop {
            ignore (0);
            condition (list[left] < pivot);
            left = left + 1;
        }
        loop {
            ignore (0);
            condition (list[right] > pivot);
            right = right - 1;
        }

        if {
            ignore (0);
            condition (left <= right);
            num temp = list[left];
            list[left] = list[right];
            list[right] = temp;
            left = left + 1;
            right = right - 1;
        } else {
            break up;
        }
    }
}

fn main = {
    in (num a, num b);
    out (num c);

    c = a + b;
    
    num[] list = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    
    quick_sort(list, 0, list.length - 1);

    stack<num>  stack = new stack<num>();
}

fn read = {
    in (string filepath);
    out (string content);

    born {
        file = os.open(filepath, "r")
    } on drop {
        file.close()
    }

    content = file.read();
}